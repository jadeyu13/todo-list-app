{"version":3,"sources":["components/Form.js","components/ToDo.js","components/ToDoList.jsx","App.js","index.js"],"names":["Form","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","onChange","name","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","ToDoList","setTodos","test","newTodos","ToDo","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNA2DeA,MAzDf,SAAcC,GACV,MAA0BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAAnE,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACRF,EAASG,QAAQC,WAGnB,IAAMC,EAAe,SAACC,GAClBP,EAASO,EAAEC,OAAOV,QAGhBW,EAAe,SAACF,GAClBA,EAAEG,iBAEFf,EAAMgB,SAAS,CACXC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAElBC,EAAS,KAGL,OACI,sBAAMW,SAAUF,EAAcQ,UAAU,YAAxC,SACCtB,EAAME,KACL,qCACE,uBACEqB,YAAY,mBACZpB,MAAOC,EACPoB,SAAUb,EACVc,KAAK,OACLC,IAAKpB,EACLgB,UAAU,oBAEZ,wBAAQK,QAASb,EAAcQ,UAAU,mBAAzC,uBAKF,qCACE,uBACEC,YAAY,aACZpB,MAAOC,EACPoB,SAAUb,EACVc,KAAK,OACLH,UAAU,aACVI,IAAKpB,IAEP,wBAAQqB,QAASb,EAAcQ,UAAU,cAAzC,4BCHGM,EAzCF,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,aAAcC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WAC/C,EAAwB/B,mBAAS,CAC/BgB,GAAI,KACJd,MAAO,KAFT,mBAAOD,EAAP,KAAa+B,EAAb,KAcA,OAAI/B,EAAKe,GACA,cAAC,EAAD,CAAMf,KAAMA,EAAMc,SATN,SAAAb,GACnB6B,EAAW9B,EAAKe,GAAId,GACpB8B,EAAQ,CACNhB,GAAI,KACJd,MAAO,QAQJ0B,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACf,sBACEd,UAAWa,EAAKE,WAAa,oBAAsB,WADrD,UAIE,qBAAmBV,QAAS,kBAAMG,EAAaK,EAAKlB,KAApD,SACGkB,EAAKd,MADEc,EAAKlB,IAGf,sBAAKK,UAAU,QAAf,UACE,cAAC,IAAD,CACEK,QAAS,kBAAMI,EAAWI,EAAKlB,KAC/BK,UAAU,gBAEZ,cAAC,IAAD,CACEK,QAAS,kBAAMM,EAAQ,CAAEhB,GAAIkB,EAAKlB,GAAId,MAAOgC,EAAKd,QAClDC,UAAU,mBAZTc,OCuBIE,MAhDf,SAAkBtC,GAClB,MAA0BC,mBAAS,IAAnC,mBAAO4B,EAAP,KAAcU,EAAd,KAkCI,OACI,gCACI,2DACA,cAAC,EAAD,CAAMvB,SApCF,SAACmB,GACb,GAAIA,EAAKd,OAAQ,QAAQmB,KAAKL,EAAKd,MAAnC,CAIA,IAAMoB,EAAQ,CAAIN,GAAJ,mBAAaN,IAC3BU,EAASE,OA+BD,cAACC,EAAD,CACAb,MAAOA,EACPC,aAhBS,SAAAb,GACjB,IAAI0B,EAAed,EAAMK,KAAI,SAACC,GAI1B,OAHGA,EAAKlB,KAAOA,IACXkB,EAAKE,YAAaF,EAAKE,YAEpBF,KAEXI,EAASI,IAUDZ,WAxBO,SAAAd,GACnB,IAAM2B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKlB,KAAOA,KACxDsB,EAASK,IAuBGZ,WAhCO,SAACc,EAAQC,GACpBA,EAAS1B,OAAQ,QAAQmB,KAAKO,EAAS1B,OAG3CkB,GAAS,SAAAS,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAKhC,KAAO6B,EAASC,EAAWE,eCLxDC,MATf,WACE,OACE,sBAAK5B,UAAU,MAAf,UACC,2CACA,cAAC,EAAD,QCHL6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d4be6785.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nfunction Form(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n    const inputRef = useRef(null);\r\n  \r\n    useEffect(() => {\r\n      inputRef.current.focus();\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 1000),\r\n            text: input\r\n        });\r\nsetInput(\"\")\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className='todo-form'>\r\n        {props.edit ? (\r\n          <>\r\n            <input\r\n              placeholder='Update your item'\r\n              value={input}\r\n              onChange={handleChange}\r\n              name='text'\r\n              ref={inputRef}\r\n              className='todo-input edit'\r\n            />\r\n            <button onClick={handleSubmit} className='todo-button edit'>\r\n              Update\r\n            </button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <input\r\n              placeholder='Add a todo'\r\n              value={input}\r\n              onChange={handleChange}\r\n              name='text'\r\n              className='todo-input'\r\n              ref={inputRef}\r\n            />\r\n            <button onClick={handleSubmit} className='todo-button'>\r\n              Add todo\r\n            </button>\r\n          </>\r\n        )}\r\n      </form>\r\n    );\r\n        }\r\nexport default Form\r\n","import React, { useState } from 'react';\r\n\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\nimport Form from './Form';\r\n\r\n\r\nconst Todo = ({ todos, completeTodo, removeTodo, updateTodo }) => {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: ''\r\n  });\r\n\r\n  \r\n  const submitUpdate = value => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n      id: null,\r\n      value: ''\r\n    });\r\n  };\r\n\r\n  if (edit.id) {\r\n    return <Form edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n  return todos.map((todo, index) => (\r\n    <div\r\n      className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n      key={index}\r\n    >\r\n      <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n        {todo.text}\r\n      </div>\r\n      <div className='icons'>\r\n        <RiCloseCircleLine\r\n          onClick={() => removeTodo(todo.id)}\r\n          className='delete-icon'\r\n        />\r\n        <TiEdit\r\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n          className='edit-icon'\r\n        />\r\n      </div>\r\n    </div>\r\n  ));\r\n};\r\n\r\nexport default Todo;","import React, { useState } from 'react'\r\nimport ToDo from './ToDo';\r\nimport Form from './Form';\r\n\r\nfunction ToDoList(props) {\r\nconst [todos, setTodos] = useState([]);\r\nconst addToDo = (todo) => {\r\n    if(!todo.text || /^\\s*$/.test(todo.text)){\r\n        return\r\n    }\r\n\r\n    const newTodos = [todo, ...todos]\r\n    setTodos(newTodos)\r\n}\r\n\r\nconst updateTodo = (todoId, newValue) => {\r\n    if(!newValue.text || /^\\s*$/.test(newValue.text)){\r\n        return;\r\n    }\r\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\r\n}\r\n\r\nconst removeTodo = id => {\r\nconst removeArr = [...todos].filter(todo => todo.id !== id)\r\nsetTodos(removeArr);\r\n};\r\n\r\n\r\n\r\nconst completeTodo = id => {\r\n    let updatedTodos = todos.map((todo) => {\r\n        if(todo.id === id){\r\n            todo.isComplete =!todo.isComplete\r\n        }\r\n        return todo;\r\n    })\r\n    setTodos(updatedTodos);\r\n}\r\n\r\n    return (\r\n        <div>\r\n            <h1>What's the Plan for Today</h1>\r\n            <Form onSubmit={addToDo} />\r\n            <ToDo \r\n            todos={todos}\r\n            completeTodo={completeTodo}\r\n            removeTodo={removeTodo} \r\n            updateTodo={updateTodo} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoList\r\n","\nimport './App.css';\n\nimport ToDoList from './components/ToDoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <h1>To Do App</h1>\n     <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}